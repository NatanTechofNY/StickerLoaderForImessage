//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Roman Efimov on 21.06.16.
//  Copyright Â© 2016 Roman Efimov. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController , UIScrollViewDelegate {
    
    @IBOutlet weak var StickerScroll: UIScrollView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
       
        StickerScroll.delegate = self
        StickerScroll.isUserInteractionEnabled = true
        StickerScroll.isScrollEnabled = true
        
        setupStickerScroll()
        
        
    }
    

    func setupStickerScroll(){
    
        StickerScroll.contentSize = CGSize(width: 1000, height: 98)
        var x = CGFloat(integerLiteral: 0)
        for q in 0...10{
        
        let image = UIImageView(frame: CGRect(x: 0, y: 0 , width: 100, height: 98))
        var label  =    UILabel(frame: CGRect(x: 25, y: 100 , width: 100, height: 15))
            
        image.image = UIImage(named: "yaoming.png") // image of sticker pack
        label.text = "text" // name of sticker pack
            
        image.frame.origin.x = x
        label.frame.origin.x = label.frame.origin.x + x
        StickerScroll.addSubview(label)
        StickerScroll.addSubview(image)
            x += 100
        }
    }
    @IBAction func OpenStickerBrowser(_ sender: AnyObject) {
        let storyBoard : UIStoryboard = UIStoryboard(name: "MainInterface", bundle:nil)
        let nextViewController = storyBoard.instantiateViewController(withIdentifier: "StickerBrowserViewController") as! StickerBrowserViewController
        self.present(nextViewController, animated:true, completion:nil)
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
